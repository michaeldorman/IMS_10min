var = "RH"
v = autofitVariogram(var ~ elevation, dat1)
g = gstat(
formula = var ~ elevation,
model = v$var_model,
data = dat1)
z = interpolate(grid, g, xyOnly = FALSE)
z
dat$var = dat@data[, input$var] %>% as.numeric
dat$var = dat@data[, var] %>% as.numeric
dat = dat[!is.na(dat$var), ]
dat1 = dat
v = autofitVariogram(var ~ elevation, dat1)
g = gstat(
formula = var ~ elevation,
model = v$var_model,
data = dat1)
z = interpolate(grid, g, xyOnly = FALSE)
z
?reclassify
vals
vals %>% lag
vals %>% lag %>% as.numeric
vals %>% lag(2) %>% as.numeric
vals[2:length(vals)]
vals[1:(length(vals)-1)]
vals[2:length(vals)]
mean(vals[1:(length(vals)-1)],
vals[2:length(vals)])
pmean
,max
pmax
?pmax
matrix(
vals[1:(length(vals)-1)],
vals[2:length(vals)],
(vals[1:(length(vals)-1)] + vals[2:length(vals)]) / 2
)
(vals[1:(length(vals)-1)] + vals[2:length(vals)]) / 2
vals[1:(length(vals)-1)]
matrix(
c(vals[1:(length(vals)-1)],
vals[2:length(vals)],
(vals[1:(length(vals)-1)] + vals[2:length(vals)]) / 2),
ncol = 3
)
z = reclassify(z, rcl)
rcl = matrix(
c(vals[1:(length(vals)-1)],
vals[2:length(vals)],
(vals[1:(length(vals)-1)] + vals[2:length(vals)]) / 2),
ncol = 3
)
z = reclassify(z, rcl)
plot(z)
z = interpolate(grid, g, xyOnly = FALSE)
plot(z)
z = mask(z, grid)
shiny::runApp()
shiny::runApp()
shiny::runApp()
current_vals = values(z) %>% unique %>% sort
current_vals
z = reclassify(z, rcl)
z = mask(z, grid)
current_vals = values(z) %>% unique %>% sort
current_vals
cols
cols = rev(rainbow(length(vals)+5)[1:length(vals)])
cols
vals
current_vals
vals + diff(vals)
vals + diff(vals)/2
vals[1:(length(vals)-1) + diff(vals)/2
vals[1:(length(vals)-1)] + diff(vals)/2
current_vals
shiny::runApp()
shiny::runApp()
current_vals
vals
shiny::runApp()
ctrs
ctrs = vals[1:(length(vals)-1)] + diff(vals)/2
ctrs
vals
cols
shiny::runApp()
dat1$time_obs[1]
dat1$time_obs[1] %>% gsub(" ", "\n", .)
plot(1, main = "2015-08-01\n10:20")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?bootstrapPage
?textOutput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(dat)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
GRID
grid
plot(grid)
z = grid
z[!is.na(z)] = 0
plot(z)
shiny::runApp()
shiny::runApp()
dat$Rain
dat1$Rain
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
colorNumeric(palette = "red", domain = 0, na.color = NA)
colorNumeric(palette = "red", domain = 0, na.color = NA)(0)
colorNumeric(palette = "red", domain = 0, na.color = NA)(NA)
shiny::runApp()
shiny::runApp()
vars
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
pnt
pnt$var
shiny::runApp()
shiny::runApp()
pnt
paste(pnt$stn_name, pnt$var)
dat$var
pnt = spTransform(dat, CRS("+proj=longlat +datum=WGS84"))
paste(pnt$stn_name, pnt$var)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?clearMarkers
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp('~/Dropbox/Data/Apps/viewer')
shiny::runApp()
Sys.setlocale("LC_ALL", "Hebrew")
current = Sys.Date()
dst = seq(as.Date("2015-05-27"), as.Date("2015-10-25"))
dst = seq(as.Date("2015-05-27"), as.Date("2015-10-25"), by = 1)
dst
###############################################################
# Code to publish interpolated temperature map                #
# based on current observations from the                      #
# Israel Meteorological Service (IMS) website                 #
# By Michael Dorman                                           #
###############################################################
library(shiny)
library(leaflet)
library(magrittr)
library(XML)
library(httr)
library(plyr)
library(rgdal)
library(sp)
library(raster)
library(rgeos)
library(gstat)
library(automap)
# Input data
url.name = "https://data.gov.il//sites/data.gov.il/files/xml/imslasthour.xml"
stations = read.csv("metadata10minutesIMS7.csv", stringsAsFactors = FALSE)
grid = raster("SRTM_Israel_900.tif") %>% aggregate(2)
names(grid) = "elevation"
# Read XML contents
url.get = GET(url.name)
url.content = content(url.get, as = "text")
dat =
xmlParse(url.content) %>%
getNodeSet("//Observation") %>%
xmlToDataFrame(stringsAsFactors = FALSE)
# Format time
dat$time_obs =
dat$time_obs %>%
gsub("T", " ", .) %>%
as.POSIXct
# Daylight savings time
current = Sys.Date()
dst = seq(as.Date("2015-05-27"), as.Date("2015-10-25"), by = 1)
if(current %in% dst) { # Daylight saving time in effect
dat$time_obs = dat$time_obs + 60*60
}
# Subset most recent observations
recent = dat$time_obs %>% unique %>% sort(decreasing = TRUE) %>% `[`(1)
dat = dat[dat$time_obs == recent, ]
dat$time_obs = dat$time_obs %>% format('%Y-%m-%d %H:%M')
dim(dat)
dat = join(dat, stations, "stn_name")
dat$lon = dat$lon %>% gsub("ยบ", "", .) %>% as.numeric
dat$lat = dat$lat %>% gsub("ยบ", "", .) %>% as.numeric
dat = dat[!is.na(dat$lon) & !is.na(dat$lat), ]
dim(dat)
###############################################################
# Code to publish interpolated temperature map                #
# based on current observations from the                      #
# Israel Meteorological Service (IMS) website                 #
# By Michael Dorman                                           #
###############################################################
library(shiny)
library(leaflet)
library(magrittr)
library(XML)
library(httr)
library(plyr)
library(rgdal)
library(sp)
library(raster)
library(rgeos)
library(gstat)
library(automap)
# Input data
url.name = "https://data.gov.il//sites/data.gov.il/files/xml/imslasthour.xml"
stations = read.csv("metadata10minutesIMS7.csv", stringsAsFactors = FALSE)
grid = raster("SRTM_Israel_900.tif") %>% aggregate(2)
names(grid) = "elevation"
# Read XML contents
url.get = GET(url.name)
url.content = content(url.get, as = "text")
dat =
xmlParse(url.content) %>%
getNodeSet("//Observation") %>%
xmlToDataFrame(stringsAsFactors = FALSE)
# Format time
dat$time_obs =
dat$time_obs %>%
gsub("T", " ", .) %>%
as.POSIXct
# Daylight savings time
current = Sys.Date()
dst = seq(as.Date("2015-05-27"), as.Date("2015-10-25"), by = 1)
if(current %in% dst) { # Daylight saving time in effect
dat$time_obs = dat$time_obs + 60*60
}
# Subset most recent observations
recent = dat$time_obs %>% unique %>% sort(decreasing = TRUE) %>% `[`(1)
dat = dat[dat$time_obs == recent, ]
dat$time_obs = dat$time_obs %>% format('%Y-%m-%d %H:%M')
View(dat)
dat = join(dat, stations, "stn_name")
shiny::runApp()
source('~/Dropbox/Projects/IMS_Temp_10min/IMS_Temp_10min.R', echo=TRUE)
###############################################################
# Code to publish interpolated temperature map                #
# based on current observations from the                      #
# Israel Meteorological Service (IMS) website                 #
# By Michael Dorman                                           #
###############################################################
library(XML)
library(httr)
library(plyr)
library(rgdal)
library(sp)
library(raster)
library(rgeos)
library(gstat)
library(automap)
library(plotGoogleMaps)
library(leaflet)
library(markdown)
library(magrittr)
# Input data
url.name = "https://data.gov.il//sites/data.gov.il/files/xml/imslasthour.xml"
stations = read.csv("metadata10minutesIMS7.csv", stringsAsFactors = FALSE)
grid = raster("SRTM_Israel_900.tif") %>% aggregate(2)
# Read XML contents
url.get = GET(url.name)
url.content = content(url.get, as = "text")
dat =
xmlParse(url.content) %>%
getNodeSet("//Observation") %>%
xmlToDataFrame(stringsAsFactors = FALSE)
# Format time
dat$time_obs =
dat$time_obs %>%
gsub("T", " ", .) %>%
as.POSIXct
# Daylight savings time
if(as.POSIXlt(Sys.time())$isdst == 1) { # Daylight saving time in effect
dat$time_obs = dat$time_obs + 60*60
}
# Subset most recent observations
recent = dat$time_obs %>% unique %>% sort(decreasing = TRUE) %>% `[`(1)
dat = dat[dat$time_obs == recent, ]
dat$time_obs = dat$time_obs %>% format('%Y-%m-%d %H:%M')
# Convert to point layer
dat = join(dat, stations, "stn_name")
dat$lon = dat$lon %>% gsub("ยบ", "", .) %>% as.numeric
dat$lat = dat$lat %>% gsub("ยบ", "", .) %>% as.numeric
dat = dat[!is.na(dat$lon) & !is.na(dat$lat), ]
coordinates(dat) = ~ lon + lat
proj4string(dat) = "+proj=longlat +datum=WGS84"
dat = spTransform(dat, CRS(proj4string(grid)))
# Perform Universal Kriging interpolation
v = autofitVariogram(TD ~ elevation, dat)
g = gstat(
formula = TD ~ elevation,
model = v$var_model,
data = dat)
names(grid) = "elevation"
z = interpolate(grid, g, xyOnly = FALSE)
z = mask(z, grid)
z = round(z)
pnt = spTransform(dat, CRS("+proj=longlat +datum=WGS84"))
pol = rasterToPolygons(z, n = 4, dissolve = TRUE)
pol = spTransform(pol, CRS("+proj=longlat +datum=WGS84"))
line = rasterToContour(z, levels = seq(1, 45, 1))
line = spTransform(line, CRS("+proj=longlat +datum=WGS84"))
line = disaggregate(line)
vals = 1:45
cols = rev(rainbow(50)[1:45])
pal = colorNumeric(cols, domain = vals, na.color = NA)
current_vals = values(z) %>% unique %>% sort
current_cols = cols[match(current_vals, vals)]
m =
leaflet() %>%
addTiles() %>%
addRasterImage(
z,
colors = pal,
opacity = 0.75
) %>%
addCircleMarkers(
data = pnt,
weight = 1,
radius = 2.5,
color = "black",
fillOpacity = 0,
popup = ~as.character(TD)
) %>%
addPolygons(data = pol,
stroke = FALSE,
fillOpacity = 0,
popup = ~as.character(layer)
) %>%
addPolylines(data = line, weight = 1, color = "black") %>%
addLegend(
position = "bottomright",
colors = current_cols %>% substr(1, 7),
labels = current_vals,
opacity = 1,
title = dat$time_obs[1]
)
library(htmlwidgets)
saveWidget(m, file="m.html")
# Publish HTML to Rpubs
options(rpubs.upload.method = "internal")
rpubsUpload("Current Temperature in Israel",
"m.html",
id = "https://api.rpubs.com/api/v1/document/56898/5a37c0b5698440c4bbdc81db6bb1a3cb")
###############################################################
# Code to publish interpolated temperature map                #
# based on current observations from the                      #
# Israel Meteorological Service (IMS) website                 #
# By Michael Dorman                                           #
###############################################################
library(XML)
library(httr)
library(plyr)
library(rgdal)
library(sp)
library(raster)
library(rgeos)
library(gstat)
library(automap)
library(plotGoogleMaps)
library(leaflet)
library(markdown)
library(magrittr)
# Input data
url.name = "https://data.gov.il//sites/data.gov.il/files/xml/imslasthour.xml"
stations = read.csv("metadata10minutesIMS7.csv", stringsAsFactors = FALSE)
grid = raster("SRTM_Israel_900.tif") %>% aggregate(3)
# Read XML contents
url.get = GET(url.name)
url.content = content(url.get, as = "text")
dat =
xmlParse(url.content) %>%
getNodeSet("//Observation") %>%
xmlToDataFrame(stringsAsFactors = FALSE)
# Format time
dat$time_obs =
dat$time_obs %>%
gsub("T", " ", .) %>%
as.POSIXct
# Daylight savings time
if(as.POSIXlt(Sys.time())$isdst == 1) { # Daylight saving time in effect
dat$time_obs = dat$time_obs + 60*60
}
# Subset most recent observations
recent = dat$time_obs %>% unique %>% sort(decreasing = TRUE) %>% `[`(1)
dat = dat[dat$time_obs == recent, ]
dat$time_obs = dat$time_obs %>% format('%Y-%m-%d %H:%M')
# Convert to point layer
dat = join(dat, stations, "stn_name")
dat$lon = dat$lon %>% gsub("ยบ", "", .) %>% as.numeric
dat$lat = dat$lat %>% gsub("ยบ", "", .) %>% as.numeric
dat = dat[!is.na(dat$lon) & !is.na(dat$lat), ]
coordinates(dat) = ~ lon + lat
proj4string(dat) = "+proj=longlat +datum=WGS84"
dat = spTransform(dat, CRS(proj4string(grid)))
# Perform Universal Kriging interpolation
v = autofitVariogram(TD ~ elevation, dat)
g = gstat(
formula = TD ~ elevation,
model = v$var_model,
data = dat)
names(grid) = "elevation"
z = interpolate(grid, g, xyOnly = FALSE)
z = mask(z, grid)
z = round(z)
pnt = spTransform(dat, CRS("+proj=longlat +datum=WGS84"))
pol = rasterToPolygons(z, n = 4, dissolve = TRUE)
pol = spTransform(pol, CRS("+proj=longlat +datum=WGS84"))
line = rasterToContour(z, levels = seq(1, 45, 1))
line = spTransform(line, CRS("+proj=longlat +datum=WGS84"))
line = disaggregate(line)
vals = 1:45
cols = rev(rainbow(50)[1:45])
pal = colorNumeric(cols, domain = vals, na.color = NA)
current_vals = values(z) %>% unique %>% sort
current_cols = cols[match(current_vals, vals)]
m =
leaflet() %>%
addTiles() %>%
addRasterImage(
z,
colors = pal,
opacity = 0.75
) %>%
addCircleMarkers(
data = pnt,
weight = 1,
radius = 2.5,
color = "black",
fillOpacity = 0,
popup = ~as.character(TD)
) %>%
addPolygons(data = pol,
stroke = FALSE,
fillOpacity = 0,
popup = ~as.character(layer)
) %>%
addPolylines(data = line, weight = 1, color = "black") %>%
addLegend(
position = "bottomright",
colors = current_cols %>% substr(1, 7),
labels = current_vals,
opacity = 1,
title = dat$time_obs[1]
)
library(htmlwidgets)
saveWidget(m, file="m.html")
# Publish HTML to Rpubs
options(rpubs.upload.method = "internal")
rpubsUpload("Current Temperature in Israel",
"m.html",
id = "https://api.rpubs.com/api/v1/document/56898/5a37c0b5698440c4bbdc81db6bb1a3cb")
0.021536 + 1 * (-0.013388)
?disaggregate
?aggregate.Spatial
?aggregate
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
